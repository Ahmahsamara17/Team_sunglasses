#!/usr/bin/exec-suid -- /usr/bin/python3 -I

{% from 'base_templates/names.j2' import generate_names %}
{% set settings = namespace() %}
{{ generate_names(settings, challenge.random) }}

{% block setup %}
{%- set settings.specify_url = True -%}
{%- set settings.form_fields = {} -%}
{%- set settings.reward_alert = False -%}
{%- set settings.login_first = False -%}
{%- set settings.login_username = "admin" -%}
{%- set settings.login_password = "flag" -%}
{%- set settings.use_partial_flag = False -%}
{%- set settings.visit_attacker = False -%}
{%- set settings.attacker_url = "http://hacker.localhost:1337/" -%}
{%- set settings.check_alert = False -%}
{% endblock %}

import psutil
import urllib
import atexit
import time
import sys
import os

from selenium import webdriver
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.firefox.service import Service as FirefoxService
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException{% if settings.check_alert %}, UnexpectedAlertPresentException{% endif %}

os.setuid(os.geteuid())
os.environ.clear()
os.environ["PATH"] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

options = FirefoxOptions()
options.add_argument("--headless")
service = FirefoxService(executable_path="/usr/local/bin/geckodriver", log_path="/dev/null")
browser = webdriver.Firefox(service=service, options=options)
atexit.register(browser.quit)

# Wait for service to start
for i in range(5):
    open_ports = {s.laddr.port for s in psutil.net_connections(kind="inet") if s.status == "LISTEN"}
    if 80 in open_ports:
        break
    time.sleep(1)
else:
    print("Service doesn't seem to be running?")
    sys.exit(1)

{% if not settings.specify_url %}
challenge_url = "http://challenge.localhost:80/{{settings.endpoint_challenge}}"
{% else %}
if len(sys.argv) == 1:
    print(f"Usage: {sys.argv[0]} URL")
    sys.exit(1)

challenge_url = sys.argv[1]

url_parsed = urllib.parse.urlparse(challenge_url)
if url_parsed.hostname != "challenge.localhost":
    print("Hostname should be 'challenge.localhost'.")
    sys.exit(2)
if url_parsed.port not in {None, 80}:
    print("Port should be 80.")
    sys.exit(3)
{% endif %}

{% if settings.login_first %}
flag = open("/flag").read().strip()
challenge_url = "http://challenge.localhost:80/"

print(f"Visiting {challenge_url}")
browser.get(challenge_url)

print("Logging in as {{settings.login_username}}...")
browser.find_element(By.NAME, "username").send_keys("{{settings.login_username}}")
{% if settings.login_password == "flag" %}
browser.find_element(By.NAME, "password").send_keys({% if settings.use_partial_flag %}flag[-20:]{% else %}flag{% endif %})
{% else %}
browser.find_element(By.NAME, "password").send_keys("{{settings.login_password}}")
{% endif %}
browser.find_element(By.NAME, "submit").submit()
time.sleep(3)
print("Logged in!")

{% if settings.visit_attacker %}
print("Visiting the attacker's website ({{settings.attacker_url}})...")
browser.get("{{settings.attacker_url}}")
{% endif %}
{% else %}
print(f"Visiting {challenge_url}")
browser.get(challenge_url)
{% endif %}

{% if settings.form_fields %}
{% for k, v in settings.form_fields.items() %}
browser.find_element(By.NAME, "{{k}}").send_keys({{v}})
{% endfor %}
browser.find_element(By.NAME, "submit").submit()
{% endif %}

{% if settings.reward_alert %}
try:
    WebDriverWait(browser, 1).until(EC.alert_is_present())
except TimeoutException:
    print("Failure: JavaScript alert did not trigger...")
    sys.exit(3)
else:
    print("Alert triggered! Your reward:")
    print(open("/flag").read().strip())
{% elif settings.check_alert %}
try:
    WebDriverWait(browser, 1).until(EC.alert_is_present())
except TimeoutException:
    print("Failure: JavaScript alert did not trigger...")
    print("Page source:")
    print(browser.page_source)
    sys.exit(3)
else:
    browser.switch_to.alert.accept()
    if browser.current_url.replace(":80", "").startswith(challenge_url.replace(":80", "")):
        print("Alert triggered! Your reward:")
        print(flag)
    else:
        print("It looks like the alert did not come from {challenge_url}/ephemeral?")
{% elif settings.visit_attacker %}
time.sleep(3)
print("Visited! Go check if the attack worked!")
{% else %}
time.sleep(2)
print("Visited! Go check if the attack worked!")
{% endif %}
