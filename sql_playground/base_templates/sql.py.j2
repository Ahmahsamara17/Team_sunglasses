#!/usr/bin/exec-suid -- /usr/bin/python3 -I

{%- set settings = namespace(var=None) -%}

{% block setup %}
{% endblock %}

import sys
import string
import random
import sqlite3
import tempfile

# Don't panic about the TemporaryDB class. It simply implements a temporary database
# in which this application can store data. You don't need to understand its internals,
# just that it processes SQL queries using db.execute().
class TemporaryDB:
    def __init__(self):
        self.db_file = tempfile.NamedTemporaryFile("x", suffix=".db")

    def execute(self, sql, parameters=()):
        connection = sqlite3.connect(self.db_file.name)
        connection.row_factory = sqlite3.Row
        cursor = connection.cursor()
        result = cursor.execute(sql, parameters)
        connection.commit()
        return result

db = TemporaryDB()

{% block database_setup %}
{% if settings.db_state == "trivial" -%}
# https://www.sqlite.org/lang_createtable.html
db.execute("""CREATE TABLE {{settings.table_name}} AS SELECT ? as {{settings.column_name}}""", [open("/flag").read().strip()])
{% elif settings.db_state == "flooded" -%}
def random_word(length):
    return "".join(random.sample(string.ascii_letters*10, length))
flag = open("/flag").read().strip()

# https://www.sqlite.org/lang_createtable.html
db.execute("""CREATE TABLE {{settings.table_name}} AS SELECT {% if settings.flag_tag %}{{settings.tag_value_noflag}} as flag_tag, {% endif %}? as {{settings.column_name}}""", [random_word(len(flag))])
# https://www.sqlite.org/lang_insert.html
for i in range(random.randrange(5, 42)):
    db.execute("""INSERT INTO {{settings.table_name}} VALUES({% if settings.flag_tag %}{{settings.tag_value_noflag}}, {%endif%}?)""", [random_word(len(flag))])
db.execute("""INSERT INTO {{settings.table_name}} VALUES({% if settings.flag_tag %}?, {% endif %}?)""", [{% if settings.flag_tag %}{% if settings.random_flag_tag %}random.randrange(1337, 313371337){% else %}{{settings.tag_value_flag}}{% endif %}, {% endif %}flag])

{% if settings.decoy_flags %}
for i in range(random.randrange(5, 21)):
    db.execute("""INSERT INTO {{settings.table_name}} VALUES({% if settings.flag_tag %}{{settings.tag_value_flag}}, {% endif %}?)""", [random_word(len(flag))])
for i in range(random.randrange(5, 21)):
    db.execute("""INSERT INTO {{settings.table_name}} VALUES({% if settings.flag_tag %}{{settings.tag_value_noflag}}, {% endif %}?)""", ["pwn.college{"+random_word(len(flag)-len("pwn.college{}"))+"}"])
{% endif %}

for i in range(random.randrange(5, 42)):
    db.execute("""INSERT INTO {{settings.table_name}} VALUES({% if settings.flag_tag %}{{settings.tag_value_noflag}}, {% endif %}?)""", [random_word(len(flag))])
{% elif settings.db_state == "randomized" -%}
table_name = "".join(random.sample(string.ascii_letters, 8))
db.execute(f"""CREATE TABLE {table_name} AS SELECT ? as {{settings.column_name}}""", [open("/flag").read().strip()])
{% endif %}
{% endblock %}

{% if settings.doc_hint %}
# HINT: {{settings.doc_hint}}
{% endif -%}
for _ in range({{settings.num_queries or 1}}):
    query = input("sql> ")

    try:
        results = db.execute(query).fetchall()
    except sqlite3.Error as e:
        print("SQL ERROR:", e)
        sys.exit(1)

    if len(results) == 0:
        print("No results returned!")
        sys.exit(0)

    {% if settings.max_rows -%}
    if len(results) > {{settings.max_rows}}:
        print("You're not allowed to read this many rows!")
        sys.exit(1)
    {% endif -%}

    {% if settings.max_columns -%}
    if len(results[0].keys()) > {{settings.max_columns}}:
        print("You're not allowed to read this many columns!")
        sys.exit(1)
    {% endif -%}

    {% if settings.max_characters -%}
    for row in results:
        for k in row.keys():
            if type(row[k]) in (str, bytes) and len(row[k]) > {{settings.max_characters}}:
                print("You're not allowed to read this many characters!")
                sys.exit(1)
    {% endif -%}

    print(f"Got {len(results)} rows.")
    for row in results:
        print(f"- { { k:row[k] for k in row.keys() } }")